library ieee;
use ieee.numeric_std.all;

vunit formal_test(f_i2c_master(rtl)) {


	--main tests
	--1) use loopback between master and "slave"
	--2) check that for every value the master sends, they receive the same value back
	--3) check the continuous mode operation by testing two random values send in consequence
	--4) witness cover properties to insure against vacuous sucess 

	default clock is rising_edge(i_clk);

	signal sda : std_ulogic := '0';	
	signal data_to_tx : std_ulogic_vector(7 downto 0);
	signal data_rx : std_ulogic_vector(7 downto 0);
	signal addr_rw : std_ulogic_vector(7 downto 0);
	type t_mem is array (0 to 2**8 -1) of std_ulogic_vector(7 downto 0);
	signal mem : t_mem := (others => (others => '0'));

	signal random_value1 : std_ulogic_vector(7 downto 0);
	signal random_value2: std_ulogic_vector(7 downto 0);
	attribute anyconst : boolean;
	attribute anyconst of random_value1 : signal is true;
	attribute anyconst of random_value2 : signal is true;

	process(i_clk,i_arst_n)
	begin
		if(i_arst_n = '0') then
			sda <= '0';
		elsif(rising_edge(i_clk)) then
			if(r_data_clk = '1' and r_data_clk_prev = '0') then
				case state is
					when ready =>
						if(i_ena = '1' and i_rw = '0') then
							data_to_tx <= i_data;
						end if;
					when slv_ack2 =>
						if(i_ena = '1') then
							data_to_tx <= i_data;	
						end if;	
					when master_ack =>
						if(i_ena = '1' and i_rw = '0') then
							data_to_tx <= i_data;
						end if;
					when others =>
						null;
				end case;
			end if;

			if(io_sclk = '0' and io_sclk_prev = '1') then
				case state is
					when cmd =>
						addr_rw(to_integer(cnt_bits)) <= r_sda;
					when wr =>
						data_rx(to_integer(cnt_bits+1)) <= r_sda;
					when slv_ack2 =>
						if(cnt_bits = 7) then
							data_rx(0) <= r_sda;
						end if;
					when others=>
						null;
				end case;
			elsif(io_sclk = '1' and io_sclk_prev = '0') then
				case state is
					when rd =>
						--sda <= data_rx(to_integer(cnt_bits)); 
						sda <= data_rx(to_integer(cnt_bits));
					when others =>
						null;
				end case;			
			end if;
		end if;
	end process;

	--#####################################################

	-------------------
	--ASSERT PROPERTIES
	-------------------

	--change value 4 based on g_sys_clk/g_bus_clk
	check_write: assert always (({state = slv_ack2 and data_to_tx = random_value1} |-> (next_event(state = slv_ack2 and prev(state,4) = slv_ack2 and i_arst_n = '1')(data_rx = random_value1)))abort i_arst_n = '0');
	check_write_read: assert always (({state = slv_ack2 and data_to_tx = random_value1; true[*]; state = master_ack and data_to_tx = random_value1} |-> (next_event(state = master_ack and prev(state) /= rd and i_arst_n = '1')(o_data = random_value1)))abort i_arst_n = '0');
	--#####################################################

	-------------------
	--ASSUME PROPERTIES
	-------------------
	assume {unsigned(o_data) =0};
	assume {i_arst_n = '0'};
	


	--let sda drive i_sda
	assume always {i_sda = sda};
	assume always {unsigned(i_addr) = 0};

	assume {true[*2];state = ready and  i_rw = '0' and i_data = random_value1 and i_ena = '1' and r_data_clk = '1' and r_data_clk_prev = '0'; true[*]; state = stop; true[*]; state = rd; true[*]; state = master_ack};
	--#####################################################

	-------------------
	--COVER PROPERTIES
	-------------------
	cover_r_edge_data_clk: cover {rose(r_data_clk)};
	cover_write_transaction: cover {state = slv_ack2 and data_to_tx = random_value1; true[*];prev(state) = slv_ack2 and state = slv_ack2 and i_arst_n = '1' and data_rx = random_value1};
	cover_write_read_transaction: cover {state = slv_ack2 and data_to_tx = random_value1; true[*]; state = stop and data_rx = random_value1; true[*]; state = rd; true[*]; state = master_ack ; true[*]; prev(state) = master_ack and state /= master_ack and i_arst_n = '1' and o_data = random_value1};
}